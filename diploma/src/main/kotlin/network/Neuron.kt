package network

import kotlin.math.sqrt

class Neuron {
    /**
     * Веса нейрона. Это список вещественных чисел, представляющих текущие параметры нейрона.
     */
    var w: MutableList<Double> = mutableListOf()

    /**
     * Список векторов, связанных с этим нейроном.
     * Каждый вектор представляет собой точку из обучающей выборки, которая ассоциируется с данным нейроном.
     */
    var vectors: MutableList<MutableList<Double>> = mutableListOf()

    /**
     * Базовые векторы нейрона.
     * Могут использоваться для инициализации или дополнительных вычислений.
     */
    var baseVectors: MutableList<MutableList<Double>> = mutableListOf()

    /**
     * Индексы векторов, связанных с данным нейроном.
     * Хранит позиции в выборке, которые относятся к этому нейрону.
     */
    var vectorIndexes: MutableList<Int> = mutableListOf()

    /**
     * Дисперсия векторов, связанных с нейроном.
     * Используется для анализа и контроля плотности распределения данных.
     */
    var variance: Double? = 0.0

    /**
     * Количество векторов, связанных с данным нейроном.
     * Это показатель "активности" нейрона, то есть сколько данных он обрабатывает.
     */
    var count: Int = 0

    /**
     * Конструктор для создания нейрона с автоматически инициализированными весами.
     *
     * @param m количество входов (размерность весового вектора).
     */
    constructor(m: Int) {
        // Инициализация весов значениями 1 / sqrt(m)
        w = MutableList(m) { 1.0 / sqrt(m.toDouble()) }
    }

    /**
     * Конструктор для создания нейрона с заранее заданными весами.
     *
     * @param w список весов нейрона.
     */
    constructor(w: List<Double>) {
        this.w = w.toMutableList()
    }

    /**
     * Устанавливает связанные векторы для нейрона на основе переданного списка векторов и сохранённых индексов.
     *
     * @param vectors список всех векторов из выборки.
     */
    fun setNeuronVariance(vectors: MutableList<MutableList<Double>>) {
        // Привязываем векторы, используя индексы
        this.vectors = vectorIndexes.map { vectors[it] }.toMutableList()
        // Здесь можно вычислить дисперсию или другие статистические показатели при необходимости.
    }
}